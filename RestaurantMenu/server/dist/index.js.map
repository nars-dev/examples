{"version":3,"sources":["../config/src/Config.ts","Menu.tsx","index.tsx"],"names":[],"mappings":";AAMa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,eAKM,EAAQ,EAAA,UAAU,OACX,QAAA,OAAS,CACpB,KAAM,CACJ,mBAAoB,EAAA,cAAc,EAAA,UAAU,KAAM;;ACoGtD,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5GA,MAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,QAkBM,EAAW,CACf,CACE,MAAO,mBACP,YAAa,wCACb,MAAO,EACP,SAAU,4CAEZ,CACE,MAAO,aACP,YAAa,+BACb,MAAO,EACP,SAAU,0CAEZ,CACE,MAAO,wBACP,YAAa,+BACb,MAAO,EACP,SAAU,iDAEZ,CACE,MAAO,sBACP,YAAa,2BACb,MAAO,EACP,SAAU,+CAEZ,CACE,MAAO,qBACP,YAAa,qCACb,MAAO,EACP,SAAU,8CAEZ,CACE,MAAO,iCACP,YAAa,uCACb,MAAO,EACP,SAAU,yDAEZ,CACE,MAAO,4BACP,YAAa,2BACb,MAAO,EACP,SAAU,mDAKR,EAAS,EAAA,WAAW,OAAO,CAC/B,KAAM,CACJ,kBAAmB,UACnB,kBAAmB,EACnB,gBAAiB,GACjB,kBAAmB,IAErB,MAAO,CACL,WAAY,SACZ,WAAY,MACZ,SAAU,GACV,aAAc,GAEhB,YAAa,CACX,MAAO,UACP,aAAc,GAEhB,MAAO,CACL,WAAY,SACZ,WAAY,OAEd,MAAO,CAAE,MAAO,GAAI,OAAQ,GAAI,gBAAiB,WAK7C,EAAc,GAAqB,EAAG,KAAA,KAC1C,EAAA,cAAC,EAAA,iBAAgB,CAAC,QAAS,EAAA,WAAW,EAAS,EAAK,QAClD,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,EAAO,MAClB,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,CAAE,MAAO,OAAQ,cAAe,QAC3C,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,CAAE,KAAM,IACnB,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,EAAO,OAAQ,EAAK,OACjC,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,EAAO,YAAa,cAAe,GAC7C,EAAK,aAER,EAAA,cAAC,EAAA,KAAI,CAAC,MAAO,EAAO,WAAY,EAAK,UAEvC,EAAA,cAAC,EAAA,MAAK,CAAC,OAAQ,EAAK,SAAU,MAAO,EAAO,WAMpD,SAAgB,EAAK,GACb,MAAC,GAAS,EAAM,SAAS,GAE7B,OAAA,EAAA,cAAC,EAAA,SAAQ,CACP,MAAO,CAAE,gBAAiB,SAC1B,sBAAuB,GACvB,KAAM,EACN,aAAc,GAAQ,EAAK,KAAK,MAChC,WAAY,EAAW,EAAM,sBARnC,QAAA,KAAA;;ACtFA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtBA,MAAA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,aACA,EAAA,QAAA,UAEA,IAAI,EAAM,EAAA,UACV,EAAI,IAAI,UAAW,EAAA,QAAQ,OAAO,WAClC,EAAI,OAAO,KAGX,MAAM,EAAa,CACjB,KAAM,EAAA,MAIF,EAAS,EAAA,OAAO,aAAa,EAAA,OAAQ,GAGrC,EAAkB,IAAI,EAAA,OAAO,CAAE,KAAM,MAG3C,EAAA,OAAO,gBAAgB,EAAiB","file":"index.js","sourceRoot":"..","sourcesContent":["import { InputProp, localCallback } from \"nars-common\";\n\n/*\n * Define Routes and the props\n */\nconst title = InputProp.string;\nexport const config = {\n  Menu: {\n    onMenuItemSelected: localCallback(InputProp.void, title)\n  },\n};\n","import * as React from \"react\";\nimport {\n  FlatList,\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ClientSideCallback,\n  clientSide,\n  Image,\n} from \"nars\";\n\ninterface MenuItem {\n  title: string;\n  description: string;\n  price: number;\n  imageUrl: string;\n}\n\nconst mockData = [\n  {\n    title: \"Avocado Smoothie\",\n    description: \"Avocado | Banana | Almond Milk | Kale\",\n    price: 7,\n    imageUrl: \"http://localhost:5000/static/avocado.png\",\n  },\n  {\n    title: \"100% Apple\",\n    description: \"Freshly squeezed apple juice\",\n    price: 5,\n    imageUrl: \"http://localhost:5000/static/apple.png\",\n  },\n  {\n    title: \"Mango Banana Smoothie\",\n    description: \"Mango | Banana | Almond Milk\",\n    price: 5,\n    imageUrl: \"http://localhost:5000/static/mango_banana.png\",\n  },\n  {\n    title: \"Strawberry Smoothie\",\n    description: \"Strawberry | Almond Milk\",\n    price: 6,\n    imageUrl: \"http://localhost:5000/static/strawberry.png\",\n  },\n  {\n    title: \"Raspberry Smoothie\",\n    description: \"Raspberry | Coconut Water | Banana\",\n    price: 6,\n    imageUrl: \"http://localhost:5000/static/raspberry.png\",\n  },\n  {\n    title: \"Chocolate Strawberry Milkshake\",\n    description: \"Chocolate | Strawberry | Almond Milk\",\n    price: 4,\n    imageUrl: \"http://localhost:5000/static/chocolate_strawberry.png\",\n  },\n  {\n    title: \"Spicy Orange Carrot juice\",\n    description: \"Orange | Carrot | Ginger\",\n    price: 5,\n    imageUrl: \"http://localhost:5000/static/orange_carrot.png\",\n  },\n\n];\n\nconst styles = StyleSheet.create({\n  item: {\n    borderBottomColor: \"#e2e3e4\",\n    borderBottomWidth: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 16\n  },\n  title: {\n    fontFamily: \"System\",\n    fontWeight: \"600\",\n    fontSize: 16,\n    marginBottom: 8,\n  },\n  description: {\n    color: \"#444444\",\n    marginBottom: 8,\n  },\n  price: {\n    fontFamily: \"System\",\n    fontWeight: \"500\",\n  },\n  image: { width: 70, height: 70, backgroundColor: \"white\" },\n});\n\ntype OnPress = ClientSideCallback<void, string>;\n\nconst renderItem = (onPress: OnPress) => ({ item }: { item: MenuItem }) => (\n  <TouchableOpacity onPress={clientSide(onPress, item.title)}>\n    <View style={styles.item}>\n      <View style={{ width: \"100%\", flexDirection: \"row\" }}>\n        <View style={{ flex: 1 }}>\n          <Text style={styles.title}>{item.title}</Text>\n          <Text style={styles.description} numberOfLines={2}>\n            {item.description}\n          </Text>\n          <Text style={styles.price}>{`$${item.price}`}</Text>\n        </View>\n        <Image source={item.imageUrl} style={styles.image} />\n      </View>\n    </View>\n  </TouchableOpacity>\n);\n\nexport function Menu(props: { onMenuItemSelected: OnPress }) {\n  const [posts] = React.useState(mockData);\n  return (\n    <FlatList\n      style={{ backgroundColor: \"white\" }}\n      onEndReachedThreshold={0.3}\n      data={posts}\n      keyExtractor={item => item.item.title}\n      renderItem={renderItem(props.onMenuItemSelected)}\n    />\n  );\n}\n","import { Static } from \"nars\";\nimport { Server } from \"ws\";\nimport { default as express } from \"express\";\nimport { config } from \"../config\";\nimport { Menu } from \"./Menu\";\n\nvar app = express();\napp.use('/static', express.static('static'))\napp.listen(5000);\n\n/* Define which component is rendered per given route */\nconst components = {\n  Menu: Menu\n};\n\n/* Create a router. config and components have to match! */\nconst router = Static.createRouter(config, components);\n\n/* Create a server */\nconst webSocketServer = new Server({ port: 9000 });\n\n/* Start listening for incoming requests */\nStatic.attatchListener(webSocketServer, router);\n"]}